{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/Layout/Hearder.js","components/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursoer","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","setState","target","name","value","display","flex","placeholder","className","Hearder","HearderStyle","linkStyle","to","textAlign","About","Fragment","aboutStyle","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce1c3c18.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n            return {\r\n                background: '#f4f4f4',\r\n                padding: '10px',\r\n                borderBottom: '1px #ccc dotted',  \r\n                textDecoration: this.props.todo.completed ? 'line-through' : 'none' \r\n        }\r\n    }\r\n   \r\n    render() { \r\n        const {id, title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {' '}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle()}>x</button>\r\n                    </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n  //propType\r\n  TodoItem.propTypes = {\r\n    todo:PropTypes.array.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodo:PropTypes.func.isRequired,\r\n  }\r\n\r\nconst btnStyle = () => {\r\n    return {\r\n        background: '#ff0000',\r\n        color: '#ffffff',\r\n        border: 'none',\r\n        padding: '5px 9px',\r\n        borderRadius: '50%',\r\n        cursoer: 'pointer',\r\n        float: 'right'\r\n    }\r\n}\r\nexport default TodoItem\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n      return this.props.todos.map((todo) => (\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n      ));  \r\n   }\r\n}   \r\n\r\n//propType\r\nTodos.propTypes = {\r\n  todos:PropTypes.array.isRequired,\r\n  markComplete:PropTypes.func.isRequired,\r\n  delTodo:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => { \r\n        e.preventDefault();\r\n        this.props.AddTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n\r\n    onChange= (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input \r\n                type=\"text\"\r\n                name=\"title\"\r\n                style={{flex: '10', padding: '5px'}}\r\n                placeholder=\"Add Todo ...\"\r\n                value={this.state.title}\r\n                onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Add\"\r\n                    className=\"btn\"\r\n                    style={{flex: '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n //propType\r\n AddTodo.propTypes = {\r\n    Addtodo:PropTypes.func.isRequired\r\n  }\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Hearder() {\r\n    return (\r\n       <header style={HearderStyle}>\r\n           <h1 >Todo-List</h1>\r\n           <Link style={linkStyle} to=\"/\">Home</Link> |\r\n           <Link style={linkStyle} to=\"/about\"> About</Link>\r\n       </header>\r\n    )\r\n}\r\n\r\nconst HearderStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div style={aboutStyle}>\r\n                    <h1>About</h1>\r\n                    <p style={{textAlign: 'left'}}>A Todo-list application that takes todoList\r\n                        tasks submitted by user in a form then add it \r\n                        it with TodoList item, a completed task can be mark \r\n                        out using the checkBox beside each item to indicate \r\n                        done, it fetches default todoList item \r\n                        using API from jsonplaceholder then render it on\r\n                        the web page with a delete button beside each task.\r\n                        When the delete button is clicked, the task is\r\n                        deleted from user and also from the Mimic jsonplaceholder Server.</p>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n    const aboutStyle = {\r\n        background: '#fff',\r\n        color: '#000',\r\n        textAlign: 'center',\r\n        padding: '10px',\r\n        \r\n} \r\n\r\n\r\nexport default About\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport Header from './components/Layout/Hearder';\nimport About from './components/Pages/About';\n//import uuid from 'uuid';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=3')\n    .then(res => this.setState({todos: res.data}))\n  }\n\n  //toggle checkbox complete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n}\n\ndelTodo = (id) => {\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res => this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n}\n\n//Add Todo\nAddTodo = (title) => {\n  // const newTodo = {\n  //   id: uuid.v4(),\n  //   title,\n  //   complete: false\n  // }\n  axios.post('https://jsonplaceholder.typicode.com/todos', {\n    title,\n    completed: false\n  })\n  .then(res => this.setState({ todos: [...this.state.todos, res.data]}));\n}\n\n  render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <div className=\"cotainer\" >\n        <Header />\n        <Route exact path=\"/\" render={props =>(\n          <React.Fragment>\n            <AddTodo AddTodo={this.AddTodo}/>\n            <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n          </React.Fragment>\n        )}/>\n        <Route path=\"/about\" component={About}/>\n        </div>\n    </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}